// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview Enhances an image based on weather conditions and location for visual appeal.
 *
 * - enhanceImage - A function that enhances an image based on weather and location.
 * - EnhanceImageInput - The input type for the enhanceImage function.
 * - EnhanceImageOutput - The return type for the enhanceImage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EnhanceImageInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo to be enhanced, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  weatherCondition: z.string().describe('The current weather condition (e.g., sunny, cloudy, rainy).'),
  location: z.string().describe('The location for which the weather condition applies.'),
});
export type EnhanceImageInput = z.infer<typeof EnhanceImageInputSchema>;

const EnhanceImageOutputSchema = z.object({
  enhancedPhotoDataUri: z
    .string()
    .describe('The enhanced photo as a data URI.'),
  filterApplied: z.string().describe('The filter or blurring effect applied to the photo.'),
});
export type EnhanceImageOutput = z.infer<typeof EnhanceImageOutputSchema>;

export async function enhanceImage(input: EnhanceImageInput): Promise<EnhanceImageOutput> {
  return enhanceImageFlow(input);
}

const enhanceImagePrompt = ai.definePrompt({
  name: 'enhanceImagePrompt',
  input: {schema: EnhanceImageInputSchema},
  output: {schema: EnhanceImageOutputSchema},
  prompt: `You are an image enhancement expert. Given a photo, the current weather condition, and the location, determine the most visually appealing filter or blurring effect to apply to the photo.

  The goal is to make the photo fit the weather conditions and location.

  Return the enhanced photo as a data URI, and describe the filter or blurring effect that was applied.

  Weather Condition: {{{weatherCondition}}}
  Location: {{{location}}}
  Original Photo: {{media url=photoDataUri}}

  Output:
  ${JSON.stringify(EnhanceImageOutputSchema.shape, null, 2)}`,
});

const enhanceImageFlow = ai.defineFlow(
  {
    name: 'enhanceImageFlow',
    inputSchema: EnhanceImageInputSchema,
    outputSchema: EnhanceImageOutputSchema,
  },
  async input => {
    //const {text} = await enhanceImagePrompt(input);
    //return JSON.parse(text!) as EnhanceImageOutput;

    const {media} = await ai.generate({
      // IMPORTANT: ONLY the googleai/gemini-2.0-flash-exp model is able to generate images.
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: [
        {media: {url: input.photoDataUri}},
        {
          text: `Enhance this photo for ${input.weatherCondition} weather in ${input.location}. Add a filter and/or blurring effect to make it more visually appealing and contextually relevant.`,
        },
      ],
      config: {
        responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work
      },
    });

    return {
      enhancedPhotoDataUri: media.url,
      filterApplied: `Enhanced for ${input.weatherCondition} weather in ${input.location}`,
    };
  }
);

